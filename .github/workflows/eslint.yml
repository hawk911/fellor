# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# ESLint is a tool for identifying and reporting on patterns
# found in ECMAScript/JavaScript code.
# More details at https://github.com/eslint/eslint
# and https://eslint.org

name: ESLint

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '32 18 * * 4'

jobs:
  eslint:
    name: Run eslint scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          npm install eslint@8.10.0
          npm install @microsoft/eslint-formatter-sarif@3.1.0
          # The following packages are required to lint TypeScript files.
          npm install @typescript-eslint/parser@^5.0.0 @typescript-eslint/eslint-plugin@^5.0.0

      - name: Run ESLint
        # The explicit --config flag has been removed. ESLint will now automatically look for a configuration file.
        # This will fix the "Cannot read config file" error, assuming a valid .eslintrc.* file exists in your repo.
        # If no config file exists, ESLint will error.
        # Once your configuration is working, you can add `continue-on-error: true` back to this step
        # if you want the workflow to upload results even when ESLint finds code style issues.
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        # The 'if' condition ensures this step only runs if the previous steps were successful.
        # This prevents an error if the SARIF file was not created.
        if: success() || failure()
        with:
          # The path to the SARIF file which was generated in the previous step.
          sarif_file: eslint-results.sarif
          # This is an optional parameter that will cause the Action to wait for the analysis to complete.
          wait-for-processing: true
